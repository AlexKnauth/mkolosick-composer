* Vocabulary

- A /name/ or a /variable/ is a sequence of characters, not including a space or one of the following: " , ' ` ( ) [ ] { } | ; #: 
- A /note/ is a common music note and its octave (examples: ~A#4~, ~B♭2~, ~Bb2~, ~C♯2~, ~c3~).
- A /rest/ is the literal ~rest~ or a rest symbol.
- A /duration/ is a positive fraction (with a power of two denominator) or integer.
- A /tuplet/ is a positive integer followed by the character ~t~ (example: a triplet is ~3t~).
- A /time-signature/ is a positive fraction (with a power of two denominator).
- A /key-signature/ is a music note.
- A /chord-numeral/ is a musical chord roman numeral.

* Grammar

#+BEGIN_EXAMPLE
CONSTRAINT-PROGRAM = (~define~ variable DEFINABLE) ...
                     FORM-TYPE?
                     (~define~ variable DEFINABLE) ...
                     HARMONIC-TYPE?

DEFINABLE = FORM-EXPR
          | CHORD-SPECIFIER

FORM-TYPE = #:form FORM-EXPR

FORM-EXPR = variable
          | PHRASE
          | (~or~ FORM-EXPR FORM-EXPR ...)
          | (~cadence~ CADENCE-TYPE FORM-EXPR)
          | (~cadence~ CADENCE-TYPE key FORM-EXPR)
          | (~start-key~ key FORM-EXPR)
          | (~seq~ FORM-EXPR FORM-EXPR ...)

PHRASE = (~phrase~ positive-integer)

CADENCE-TYPE = half | pac | iac | deceptive

HARMONIC-TYPE = #:harmonic HARMONIC-EXPR

HARMONIC-EXPR = (-> CHORD-SPECIFIER CHORD-SPECIFIER)
              | (~and~ CHORD-SPECIFIER CHORD-SPECIFIER ...)

CHORD-SPECIFIER = variable
                | CHORD-NUMERAL
                | (CHORD-NUMERAL ...)
                | *
                | (+ CHORD-SPECIFIER CHORD-SPECIFIER)
                | (- CHORD-SPECIFIER CHORD-SPECIFIER)


SCORE = VOICE

VOICE = (~voice~ key-signature time-signature
                 VOICE-INTERNAL ...)

VOICE-INTERNAL = MEASURE VOICE-INTERNAL ...
               | key-signature VOICE-INTERNAL ...
               | time-signature VOICE-INTERNAL ...

MEASURE = (~measure~ BEAT-THING ...)

BEAT-THING = note
           | rest
           | (duration note)
           | (duration rest)
#+END_EXAMPLE

* Scoping Rules

~(define x DEFINABLE) ...~
Binds ~x~ in ~...~ and ~x~ can only be bound once. 
